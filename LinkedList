Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Example 2:


Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
 
 
 
 /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode temphead = head;
        int count = 0;
    while(head!=null){
        head = head.next;
        count++;
    }
    count = count/2;
    count = count+1;
    head = temphead;
    for(int i = 1; i<count;i++){
        head = head.next;
    }
        return head;
    }
}



1290. Convert Binary Number in a Linked List to Integer
Easy
3.7K
147
Companies
Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.

Return the decimal value of the number in the linked list.

The most significant bit is at the head of the linked list.

 

Example 1:


Input: head = [1,0,1]
Output: 5
Explanation: (101) in base 2 = (5) in base 10
Example 2:

Input: head = [0]
Output: 0
 

Constraints:

The Linked List is not empty.
Number of nodes will not exceed 30.
Each node's value is either 0 or 1.
Accepted
386.2K
Submissions
471.2K
Acceptance Rate
81.9%




/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
import java.util.*;
import java.lang.*;
// import java.io.*;


class Solution {
    public int getDecimalValue(ListNode head) {
       
        String s = new String();
        ListNode temp = head;
        while(head!=null){
            s = s + head.val;
            head = head.next;
        }
        StringBuffer s1 = new StringBuffer(s);
        s1.reverse();
        String ans = s1.toString();
        int ret = 0; 
        int tem = 0;
        for(int i = 0; i<ans.length(); i++){
            tem = 0;
            if(ans.charAt(i)=='1'){
                tem = (int)Math.pow(2, i);
                ret = ret + tem;
            }
        }
        return ret;
    }
}



206. Reverse Linked List
Easy
18K
329
Companies
Given the head of a singly linked list, reverse the list, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
Example 2:


Input: head = [1,2]
Output: [2,1]
Example 3:

Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000
 

Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?




/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        if(head == null) return head;
        ListNode ans = head;
        ListNode temphead =  head;
        ArrayList<Integer> AL = new ArrayList<Integer>();
        while(head!=null){
            AL.add(head.val);
            head = head.next;
        }
        Collections.reverse(AL);
       for(int i=0; i<AL.size();i++){
           ans.val = AL.get(i);
           ans = ans.next;
       }
       return temphead;
    }
}


21. Merge Two Sorted Lists
Easy
18.4K
1.7K
Companies
You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

 

Example 1:


Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(((list1==null) && (list2==null)) || ((list1!=null && list2 == null))) return list1;
        if((list1 == null) && (list2!=null)) return list2;
        ListNode temphead = list1;
        ListNode ans = list1;
        ArrayList<Integer> AL = new  ArrayList<>();
        if(list1.next==null){}
        else{
        while(list1.next!=null){
            AL.add(list1.val);
            list1 = list1.next;
        }
        }
        AL.add(list1.val);
        list1.next = list2;
        while(list2!=null){
            AL.add(list2.val);
            list2 = list2.next;
        }
        Collections.sort(AL);
        for(int i=0;i<AL.size();i++){
            temphead.val = AL.get(i);
            temphead = temphead.next;
        }
        return ans;
    }
}




160. Intersection of Two Linked Lists
Easy
13K
1.2K
Companies
Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.

For example, the following two linked lists begin to intersect at node c1:


The test cases are generated such that there are no cycles anywhere in the entire linked structure.

Note that the linked lists must retain their original structure after the function returns.

Custom Judge:

The inputs to the judge are given as follows (your program is not given these inputs):

intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.
listA - The first linked list.
listB - The second linked list.
skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.
skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.
The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.

 

Example 1:


Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'
Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.
Example 2:


Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
Output: Intersected at '2'
Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.
Example 3:


Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
Output: No intersection
Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.
Explanation: The two lists do not intersect, so return null.
 

Constraints:

The number of nodes of listA is in the m.
The number of nodes of listB is in the n.
1 <= m, n <= 3 * 104
1 <= Node.val <= 105
0 <= skipA < m
0 <= skipB < n
intersectVal is 0 if listA and listB do not intersect.
intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect.
 

Follow up: Could you write a solution that runs in O(m + n) time and use only O(1) memory?


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode temphead1 = headA;
        ListNode temphead2 = headB;
        // while(headA!=null){
        //     while(headB!=null){
        //         if(headA==headB) return headA;
        //         headB = headB.next;
        //     }
        //     headA = headA.next;
        // }
        // return null;


        HashSet<ListNode> list = new HashSet<>();
        while(headA!=null){
            list.add(headA);
            headA = headA.next;
        }
        while(headB!=null){
            if(list.contains(headB)) return headB;
            headB = headB.next;
        }
        return null;
    }
}





83. Remove Duplicates from Sorted List
Easy
7.3K
249
Companies
Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,1,2]
Output: [1,2]
Example 2:


Input: head = [1,1,2,3,3]
Output: [1,2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.





/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode temp = head;
        ListNode nex = head;
        if(head==null||head.next==null) return head;
        while(head.next!=null){
            nex = head.next;
            if(head.val == nex.val){head.next = nex.next;}
            else{head = head.next;}
        }
        return temp;
    }
}







234. Palindrome Linked List
Easy
14K
766
Companies
Given the head of a singly linked list, return true if it is a 
palindrome
 or false otherwise.

 

Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false
 

Constraints:

The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9
 

Follow up: Could you do it in O(n) time and O(1) space?





/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next == null) return true;
        ListNode temp = head;
        ArrayList AL = new ArrayList<>();
        while(head!=null){
            AL.add(head.val);
            head = head.next;
        }
        boolean ans = false;
        for(int i=0;i<(AL.size())/2;i++){
            if(AL.get(i)==AL.get(AL.size()-i-1)) ans = true;
            else return false;
        }
        return ans;
    }
}



203. Remove Linked List Elements
Easy
7.2K
210
Companies
Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

 

Example 1:


Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]
Example 2:

Input: head = [], val = 1
Output: []
Example 3:

Input: head = [7,7,7,7], val = 7
Output: []
 

Constraints:

The number of nodes in the list is in the range [0, 104].
1 <= Node.val <= 50
0 <= val <= 50







/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        // ListNode temp = head;
        // ListNode nex = head;
        // while(head.next!=null){
        //     if(head.next!=null){
        //     nex = head.next;
        //     if(head.val == val){
        //         temp = head.next;
        //         head = head.next; 
        //         // continue;
        //     }
        //     else if(nex.val == val && nex.next != null){
        //         head.next = nex.next;
        //         head = head.next;
        //         // continue;
        //     }
        //     else if(nex.val == val && nex.next == null){
        //         head.next = null;
        //     }
        //     else{
        //         head = head.next;
        //     }
        //     }
        // }
        // return temp;








        Integer in = val;
        ListNode temp = head;
        ListNode ans = null;
        ArrayList<Integer> AL = new ArrayList<>();
        while(head!=null){
            AL.add(head.val);
            head = head.next;
        }
        for(int i=0;i<AL.size();i++){
            if(AL.get(i)==in){
                AL.remove(i);
                i--;
            }
        }
        System.out.println(AL);
        for(int i=0;i<AL.size();i++){
            temp.val = AL.get(i);
            if(i==0) ans = temp;
            if(i==AL.size()-1){temp.next=null;}
            else{temp = temp.next;}
        }
        // temp = null;
        return ans;
    }
}


